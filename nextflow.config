manifest {
  author = 'Satrio Wibowo <satrio.biology@yahoo.com>'
  name = 'citus'
  description = 'GPU-based Pipeline'
  mainScript = 'main.nf'
  nextflowVersion = '>=20.01.0'
  version = '0.1.0'
}

params {
  profile = false
  cache = ''
  illumina_suffixes = ['*_R{1,2}_001', '*_R{1,2}', '*_{1,2}' ]
  fastq_exts = ['.fastq.gz', '.fq.gz', '.fastq', '.fq']
  fastq_search_path = makeFastqSearchPath( illumina_suffixes, fastq_exts )
  fastq_input = 'NO_FILE'
  samplesheet_input = 'NO_FILE'
  platform= 'illumina'
  versioned_outdir = false

  outdir = null
  publish_dir_mode = 'copy'

  gpu = 'single'
}

plugins {
    id 'nf-validation'
}

aws.batch.maxParallelTransfers = 1

docker.enabled = true
docker.registry = 'quay.io'

process {
    publishDir = "${params.outdir}"
    
    errorStrategy = { task.exitStatus in ((130..145) + 104) ? 'retry' : 'finish' }
    maxRetries    = 1
    queue = "${QUEUE_SMALL}"

    withLabel:process_single {
        cpus   = { check_max( 1                  , 'cpus'    ) }
        memory = { check_max( 6.GB * task.attempt, 'memory'  ) }
        time   = { check_max( 4.h  * task.attempt, 'time'    ) }
    }
    withLabel:process_low {
        cpus   = { check_max( 2     * task.attempt, 'cpus'    ) }
        memory = { check_max( 12.GB * task.attempt, 'memory'  ) }
        time   = { check_max( 4.h   * task.attempt, 'time'    ) }
    }
    withLabel:process_medium {
        cpus   = { check_max( 6     * task.attempt, 'cpus'    ) }
        memory = { check_max( 36.GB * task.attempt, 'memory'  ) }
        time   = { check_max( 8.h   * task.attempt, 'time'    ) }
    }
    withLabel:process_high {
        cpus   = { check_max( 12    * task.attempt, 'cpus'    ) }
        memory = { check_max( 72.GB * task.attempt, 'memory'  ) }
        time   = { check_max( 16.h  * task.attempt, 'time'    ) }
    }
    withName: 'FASTQC'{
        cpus   = { check_max( 4 * task.attempt, 'cpus' ) }
        memory = { check_max( 4.GB * task.attempt, 'memory' ) }
    }

    withName:'SAMTOOLS_CONVERT'{
        memory = { check_max( 4.GB * task.attempt, 'memory' ) }
    }

    withName:'MOSDEPTH'{
        cpus   = { check_max( 4 * task.attempt, 'cpus' ) }
        memory = { check_max( 4.GB * task.attempt, 'memory' ) }
    }

    withName: 'MULTIQC' {
        cpus   = { check_max( 4 * task.attempt, 'cpus' ) }
        memory = { check_max( 12.GB * task.attempt, 'memory' ) }
    }
    withName: PB_GERMLINE {
        queue = "${QUEUE_GPU}"
        
        cpus = { params.gpu == 'multi' ? 48 : 32 }
        memory =  { params.gpu == 'multi' ? 184.GB : 120.GB }
        accelerator = { params.gpu == 'multi' ? 2 : 1 }
        
        container = 'nvcr.io/nvidia/clara/clara-parabricks:4.2.1-1'
        containerOptions = '--gpus all'
    }
}

def makeFastqSearchPath ( illumina_suffixes, fastq_exts ) {
    def fastq_search_path = []
    for (suffix in illumina_suffixes){
        for (ext in fastq_exts) {
            fastq_search_path.add(params.fastq_input.toString() + '/' + suffix.toString() + ext.toString())
        }
    }
    return fastq_search_path
}

def check_max(obj, type) {
    if (type == 'memory') {
        try {
            if (obj.compareTo(params.max_memory as nextflow.util.MemoryUnit) == 1)
                return params.max_memory as nextflow.util.MemoryUnit
            else
                return obj
        } catch (all) {
            println "   ### ERROR ###   Max memory '${params.max_memory}' is not valid! Using default value: $obj"
            return obj
        }
    } else if (type == 'time') {
        try {
            if (obj.compareTo(params.max_time as nextflow.util.Duration) == 1)
                return params.max_time as nextflow.util.Duration
            else
                return obj
        } catch (all) {
            println "   ### ERROR ###   Max time '${params.max_time}' is not valid! Using default value: $obj"
            return obj
        }
    } else if (type == 'cpus') {
        try {
            return Math.min( obj, params.max_cpus as int )
        } catch (all) {
            println "   ### ERROR ###   Max cpus '${params.max_cpus}' is not valid! Using default value: $obj"
            return obj
        }
    }
}